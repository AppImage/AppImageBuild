FROM ubuntu:xenial

ENV ARCH=aarch64
ENV DEBARCH=aarch64-linux-gnu

RUN apt-get update && \
    apt-get install -y gcc-$DEBARCH g++-$DEBARCH wget make gnupg zip git subversion automake libtool patch fuse vim-common desktop-file-utils bzip2 xz-utils

# inherited by build scripts
ARG VERBOSE=0

RUN apt-get install -y g++ gcc

ARG ZLIB_VERSION=1.2.11
COPY build-zlib.sh /
RUN bash -x /build-zlib.sh

# system dependencies for CMake (will be built as x86_64)
RUN apt-get install -y zlib1g-dev libcurl4-openssl-dev
ARG CMAKE_VERSION=3.12.0
COPY build-cmake.sh /
RUN bash -x /build-cmake.sh

ARG AUTOCONF_VERSION=2.69
COPY build-autoconf.sh /
RUN bash -x /build-autoconf.sh

ARG AUTOMAKE_VERSION=1.15
COPY build-automake.sh /
RUN bash -x /build-automake.sh

# desktop-integration dependencies
RUN bash -xc "apt-get install -y libxft-dev librsvg2-2 sudo gnupg2 curl"

RUN bash -xc "apt-get install -y libncurses5-dev texinfo"
ARG GDB_VERSION=7.10
COPY build-gdb.sh /
RUN bash -x /build-gdb.sh

ARG LIBFFI_VERSION=3.2.1
COPY build-libffi.sh /
RUN bash -x /build-libffi.sh

# set up PKG_CONFIG_PATH to ensure that deps in /deps have precedence
ENV PKG_CONFIG_PATH=/deps/lib/pkgconfig:/deps/share/pkgconfig

ARG GETTEXT_VERSION=0.19
COPY build-gettext.sh /
RUN bash -x /build-gettext.sh

RUN find /deps

# need qemu-user-static to emulate-run ARM binaries
RUN apt-get install -y --no-install-recommends qemu-user-static
# make linker and libraries available in the right paths
RUN ln -s /usr/$DEBARCH/lib/ld-linux-*.so.* /lib/
ENV LD_LIBRARY_PATH=/usr/$DEBARCH/lib

ARG GLIB_VERSION=2.44.0
COPY build-glib.sh /
RUN bash -x /build-glib.sh

ARG LIBPNG_VERSION=1.6.35
COPY build-libpng.sh /
RUN bash -x /build-libpng.sh

ARG PIXMAN_VERSION=0.34.0
COPY build-pixman.sh /
RUN bash -x /build-pixman.sh

ARG FREETYPE2_VERSION=2.9.1
COPY build-freetype2.sh /
RUN bash -x /build-freetype2.sh

ARG LIBUUID_VERSION=1.0.3
COPY build-libuuid.sh /
RUN bash -x /build-libuuid.sh

RUN apt-get install -y gperf

ARG LIBXML2_VERSION=2.9.8
COPY build-libxml2.sh /
RUN bash -x /build-libxml2.sh

ARG FONTCONFIG_VERSION=2.13.1
COPY build-fontconfig.sh /
RUN bash -x /build-fontconfig.sh

ARG CAIRO_VERSION=1.16.0
COPY build-cairo.sh /
RUN bash -x /build-cairo.sh

ARG FUSE_VERSION=2.9.7
COPY build-fuse.sh /
RUN bash -x /build-fuse.sh

# make sure that the wrong-architecture libssl is not found by CMake
# FIXME: install/build compatible libssl, or remove dependency
RUN apt-get purge -y libssl-dev

ARG QEMU_VERSION=3.0.0
RUN apt-get install -y python-dev dpkg-dev libglib2.0-dev libpixman-1-dev librsvg2-dev
COPY build-qemu.sh /
RUN bash -x /build-qemu.sh
RUN cp /usr/bin/qemu-aarch64 /usr/bin/qemu-aarch64-static

ARG ZSYNC_VERSION=0.6.2
COPY build-zsync.sh /
RUN bash -x /build-zsync.sh

ARG DESKTOP_FILE_UTILS_VERSION=0.23
COPY build-desktop-file-utils.sh /
RUN bash -x /build-desktop-file-utils.sh

RUN apt-get install -y librsvg2-dev
